apiVersion: v1
kind: ConfigMap
metadata:
    name: common
    namespace: default
data:
    LOG_LEVEL: INFO
    CASSANDRA_DATACENTER: DC1-K8Demo
    # TODO: factor these three out to a common ConfigMap; these values also exist
    # in cassandra-statefulset.yaml.
    # https://kubernetes.io/docs/tutorials/stateful-application/cassandra/ explains
    # how these values configure the Docker images.
    CASSANDRA_HOSTNAME: cassandra
    CASSANDRA_PORT: "9042"
---
apiVersion: v1
kind: Service
metadata:
    labels:
        app: cassandra
    name: cassandra
spec:
    clusterIP: None
    ports:
        - port: 9042
    selector:
        app: cassandra
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
    name: cassandra
    labels:
        app: cassandra
spec:
    serviceName: cassandra
    replicas: 3
    selector:
        matchLabels:
            app: cassandra
    template:
        metadata:
            labels:
                app: cassandra
        spec:
            terminationGracePeriodSeconds: 1800
            containers:
                - name: cassandra
                  image: gcr.io/google-samples/cassandra:v13
                  imagePullPolicy: Always
                  ports:
                      - containerPort: 7000
                        name: intra-node
                      - containerPort: 7001
                        name: tls-intra-node
                      - containerPort: 7199
                        name: jmx
                      - containerPort: 9042
                        name: cql
                  resources:
                      limits:
                          cpu: "500m"
                          memory: 1Gi
                      requests:
                          cpu: "100m"
                          memory: 1Gi
                  securityContext:
                      capabilities:
                          add:
                              - IPC_LOCK
                  lifecycle:
                      preStop:
                          exec:
                              command:
                                  - /bin/sh
                                  - -c
                                  - nodetool drain
                  env:
                      - name: MAX_HEAP_SIZE
                        value: 512M
                      - name: HEAP_NEWSIZE
                        value: 100M
                      - name: CASSANDRA_SEEDS
                        value: "cassandra-0.cassandra.default.svc.cluster.local"
                      - name: CASSANDRA_CLUSTER_NAME
                        value: "K8Demo"
                      - name: CASSANDRA_DC
                        valueFrom:
                            configMapKeyRef:
                                name: common
                                key: CASSANDRA_DATACENTER
                      - name: CASSANDRA_RACK
                        value: "Rack1-K8Demo"
                      - name: POD_IP
                        valueFrom:
                            fieldRef:
                                fieldPath: status.podIP
                  readinessProbe:
                      exec:
                          command:
                              - /bin/bash
                              - -c
                              - /ready-probe.sh
                      initialDelaySeconds: 15
                      timeoutSeconds: 5
                  # These volume mounts are persistent. They are like inline claims,
                  # but not exactly because the names need to match exactly one of
                  # the stateful pod volumes.
                  volumeMounts:
                      - name: cassandra-data
                        mountPath: /cassandra_data
    # These are converted to volume claims by the controller
    # and mounted at the paths mentioned above.
    # do not use these in production until ssd GCEPersistentDisk or other ssd pd
    volumeClaimTemplates:
        - metadata:
              name: cassandra-data
          spec:
              accessModes: ["ReadWriteOnce"]
              storageClassName: standard
              resources:
                  requests:
                      storage: 1Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
    annotations:
        deployment.kubernetes.io/revision: "1"
    creationTimestamp: null
    generation: 1
    labels:
        run: service-that-logs
    name: service-that-logs
    selfLink: /apis/extensions/v1beta1/namespaces/default/deployments/service-that-logs
spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
        matchLabels:
            run: service-that-logs
    strategy:
        rollingUpdate:
            maxSurge: 25%
            maxUnavailable: 25%
        type: RollingUpdate
    template:
        metadata:
            creationTimestamp: null
            labels:
                run: service-that-logs
        spec:
            containers:
                - envFrom:
                      - configMapRef:
                            name: common
                  image: gcr.io/maximal-copilot-249415/service-that-logs:debug
                  imagePullPolicy: IfNotPresent
                  name: service-that-logs
                  ports:
                      - containerPort: 8080
                        protocol: TCP
                        name: http
                      - containerPort: 8000
                        protocol: TCP
                        name: debug
                  resources: {}
                  terminationMessagePath: /dev/termination-log
                  terminationMessagePolicy: File
            dnsPolicy: ClusterFirst
            restartPolicy: Always
            schedulerName: default-scheduler
            securityContext: {}
            terminationGracePeriodSeconds: 30
status: {}
---
apiVersion: v1
kind: Service
metadata:
    creationTimestamp: null
    labels:
        run: service-that-logs
    name: service-that-logs
    selfLink: /api/v1/namespaces/default/services/service-that-logs
spec:
    externalTrafficPolicy: Cluster
    ports:
        - nodePort: 30434
          port: 8081
          protocol: TCP
          targetPort: 8080
    selector:
        run: service-that-logs
    sessionAffinity: None
    type: LoadBalancer
status:
    loadBalancer: {}

